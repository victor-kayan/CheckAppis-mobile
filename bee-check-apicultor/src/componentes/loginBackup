import React from "react";
import {
  ImageBackground,
  Image,
  StyleSheet,
  AsyncStorage,
  NetInfo,
  Dimensions
} from "react-native";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { login } from "../../../redux/actions/userActions";
import {
  Item,
  Input,
  Icon,
  Button,
  Container,
  Text,
  Content,
  Card,
  Form,
  View,
  Spinner
} from "native-base";
import { Alert } from "../../../componentes";
import { constants, colors } from "../../../../assets";
import styles from "./styles";

const logo = require("../../../../images/logo.png");

class Login extends React.Component {
  state = {
    email: "apicultor@gmail.com",
    password: "123456",
    error: false,
    message: "",
    connect: false
  };

  componentDidMount() {
    NetInfo.isConnected.fetch().then(isConnected => {
      console.log("First, is " + (isConnected ? "online" : "offline"));
      this.setIsconected(isConnected ? true : false);
    });
  }

  componentWillUnmount() {
    NetInfo.isConnected.fetch().then(isConnected => {
      console.log("First, is " + (isConnected ? "online" : "offline"));
      this.setIsconected(isConnected ? true : false);
    });
  }

  componentWillReceiveProps(nextProps) {
    this.redirectTo(nextProps);
  }

  setIsconected(connect) {
    this.setState({ connect });
  }

  login = async () => {
    if (this.state.connect) {
      const { email, password } = this.state;
      const { login } = this.props;
      this.setState({ error: false });
      if (email == "" || password == "") {
        this.setState({ error: true, message: "Preencha todos os campos" });
      } else if (!email.includes("@")) {
        this.setState({ error: true, message: "Email Invalido" });
      } else {
        await login({ email, password });
      }
    } else {
      alert("Falha na Conexão", "erro ao tentar conectar ao servidor.");
    }
  };

  redirectTo = async nextProps => {
    if (nextProps.logged == true) {
      try {
        await AsyncStorage.setItem(
          `@beecheckApp:${constants.ACCESS_TOKEN}`,
          nextProps.token
        );
      } catch (error) {
        console.log(error);
        throw error;
      }
      this.props.navigation.navigate("Home");
    } else if (
      nextProps.logged == false &&
      nextProps.loading == false &&
      this.state.email != ""
    ) {
      this.setState({ error: true, message: "Email ou senha invalidos" });
    }
  };

  render() {
    const { loading } = this.props;
    const { error, email, password } = this.state;
    let { height } = Dimensions.get("window");

    return (
      <Container>
        <ImageBackground
          source={require("../../../../images/backgroundLogin.jpg")}
          style={[styles.backgroundImage, { height: height }]}
        >
          {/* <Header transparent androidStatusBarColor={"transparent"} /> */}
          <Content padder>
            <Card transparent style={styles.cardContainer}>
              <View style={styles.view}>
                <Image source={logo} />
                <View style={styles.logoName}>
                  <Text style={styles.textLogoBee}>Bee</Text>
                  <Text style={styles.textLogoCheck} note>
                    Check
                  </Text>
                </View>
              </View>
              {error ? (
                <Alert type="error" message={this.state.message} />
              ) : null}
              <Form>
                <Item last style={{ marginTop: 25 }}>
                  <Icon active type="Entypo" name="email" style={styles.icon} />
                  <Input
                    autoFocus
                    underlineColorAndroid="transparent"
                    autoCapitalize="none"
                    value={email}
                    placeholder="email"
                    style={styles.input}
                    placeholderTextColor={colors.white}
                    onChangeText={email => this.setState({ email })}
                  />
                </Item>
                <Item last>
                  <Icon active name="key" style={styles.icon} />
                  <Input
                    secureTextEntry={true}
                    underlineColorAndroid="transparent"
                    autoCapitalize="none"
                    placeholder="senha"
                    style={styles.input}
                    placeholderTextColor={colors.white}
                    value={password}
                    onChangeText={password => this.setState({ password })}
                  />
                </Item>
                <Button full style={styles.button} onPress={this.login}>
                  <Text style={styles.textButton}>Entrar</Text>
                  {loading ? (
                    <Spinner color="black" style={styles.spinnerButton} />
                  ) : null}
                </Button>
              </Form>
            </Card>
          </Content>
        </ImageBackground>
      </Container>
    );
  }
}

// The function takes data from the app current state,
// and insert/links it into the props of our component.
// This function makes Redux know that this component needs to be passed a piece of the state
function mapStateToProps(state, props) {
  return {
    loading: state.userState.loading,
    logged: state.userState.logged,
    token: state.userState.token
  };
}

// // Doing this merges our actions into the component’s props,
// // while wrapping them in dispatch() so that they immediately dispatch an Action.
// // Just by doing this, we will have access to the actions defined in out actions file (action/home.js)
function mapDispatchToProps(dispatch) {
  return bindActionCreators({ login }, dispatch);
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(Login);

